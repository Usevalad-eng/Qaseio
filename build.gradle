plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
}

group 'org.itstep'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

allure {
    report {
        version.set("2.12.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.12.0")
            }
        }
    }
}

def junitVersion = "5.11.3",
    selenideVersion = "6.19.1",
    slf4jVersion = "2.0.16",
    assertjVersion = "3.26.3",
    allureVersion = "2.12.0",
    restVersion = "5.5.0",
    fakerVersion = "1.0.2",
    jacksonVersion = "2.18.2"

dependencies {
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:$restVersion",
            "com.github.javafaker:javafaker:$fakerVersion",
            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    )
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").toString().isEmpty()) includeTags System.getProperty("tag").toString()
    }
if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelis' : System.getProperty("threads").toInteger()
        ]
    }
testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
